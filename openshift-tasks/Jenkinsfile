#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) 
{
	node('skopeo-pod') {
		
		def mvnCmd = "mvn -s ../nexus_settings.xml"
		
		stage('Checkout Source') {
			git  url: 'https://github.com/fiki574/OpenShiftAdvDevHomework.git'
		}
		
		dir('openshift-tasks') {
			
			def version = getVersionFromPom("pom.xml")
			def devTag  = "${version}-${BUILD_NUMBER}"
			def prodTag = "${version}"
			
			stage('Build war') {
				sh "${mvnCmd} clean package -DskipTests"
			}
			
			stage('Parallel'){
				parallel firstBranch: {
					stage('Unit Tests') {
						sh "${mvnCmd} test"
					}
				}, secondBranch: {
					stage('Code Analysis') {
						sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000 -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
					} 
				}
			}
			
			stage('Publish to Nexus') {
				sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
			}
			
			stage('Build and Tag OpenShift Image') {
				sh "oc start-build tasks --follow --from-file=./target/openshift-tasks.war -n ${GUID}-tasks-dev"
				openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: '${GUID}-tasks-dev', namespace: '${GUID}-tasks-dev', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
			}
			
			stage('Deploy to Dev') {
				sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag} -n ${GUID}-tasks-dev"
				sh "oc set env dc/tasks VERSION='$devTag (tasks-dev)' -n $GUID-tasks-dev"
				sh "oc delete configmap tasks-config -n ${GUID}-tasks-dev --ignore-not-found=true"
				sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-dev"
		  
				openshiftDeploy depCfg: 'tasks', namespace: '${GUID}-tasks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
				openshiftVerifyDeployment depCfg: 'tasks', namespace: '${GUID}-tasks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
				openshiftVerifyService namespace: '${GUID}-tasks-dev', svcName: 'tasks', verbose: 'false'
			}
			
			stage('Copy Image to Nexus container registry') {
				sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"
				openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: '${GUID}-tasks-dev', namespace: '${GUID}-tasks-dev', srcStream: 'tasks', srcTag: devTag, verbose: 'false'
			}
			
			def destApp   = "tasks-green"
			def activeApp = ""
			
			stage('Blue/Green Production Deployment') {
				activeApp = sh(returnStdout: true, script: "oc get route tasks -n ${GUID}-tasks-prod -o jsonpath='{ .spec.to.name }'").trim()
				if (activeApp == "tasks-green") destApp = "tasks-blue"
				
				sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag} -n ${GUID}-tasks-prod"
				sh "oc set env dc/tasks-green VERSION='$prodTag (tasks green)' -n $GUID-tasks-prod"
				sh "oc set env dc/tasks-blue VERSION='$prodTag (tasks blue)' -n $GUID-tasks-prod"
				sh "oc delete configmap ${destApp}-config -n ${GUID}-tasks-prod --ignore-not-found=true"
				sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-prod"
				
				openshiftDeploy depCfg: destApp, namespace: '${GUID}-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
				openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
				openshiftVerifyService namespace: '${GUID}-tasks-prod', svcName: destApp, verbose: 'false'  
			}
			
			stage('Switch over to new Version') {
				sh 'oc patch route tasks -n ${GUID}-tasks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
			}
		}
	}
}

def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
